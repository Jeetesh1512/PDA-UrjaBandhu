generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model User {
  id                    String                  @id
  email                 String                  @unique
  name                  String
  role                  Role                    @default(BASIC_USER)
  admin                 Admin?
  basicUser             BasicUser?
  lineman               Lineman?
  notifications         Notification[]
  NotificationRecipient NotificationRecipient[]
  Otp                   Otp[]
}

model Admin {
  id           String        @id
  user         User          @relation(fields: [id], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Lineman {
  id           String           @id
  appointments Appointment[]
  updates      IncidentUpdate[]
  user         User             @relation(fields: [id], references: [id], onDelete: Cascade)
  Outage       Outage[]
  locality     Locality[]       @relation("LinemanToLocality")
}

model BasicUser {
  id          String     @id
  householdId String
  household   Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [id], references: [id], onDelete: Cascade)
  Incident    Incident[]

  @@unique([id, householdId])
}

model Household {
  id           String        @id
  consumerName String
  address      String
  latitude     Float
  longitude    Float
  primaryEmail String
  localityId   String
  residents    BasicUser[]
  Bill         Bill[]
  locality     Locality      @relation(fields: [localityId], references: [id], onDelete: Cascade)
  meter        Meter[]
  Transaction  Transaction[]

  @@index([latitude, longitude])
  @@index([id])
}

model Meter {
  id             String    @id @default(uuid())
  householdId    String
  powerStatus    Boolean
  currentReading BigInt
  lastReading    BigInt
  household      Household @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@index([powerStatus])
}

model Locality {
  id          String                  @id @default(uuid())
  location    String                  @unique
  boundary    Unsupported("geometry(MULTIPOLYGON,4326)")
  Appointment Appointment[]
  households  Household[]
  incidents   Incident[]
  outages     Outage[]
  lineman     Lineman[]               @relation("LinemanToLocality")

  @@index([location])
}

model Appointment {
  id         String   @id @default(uuid())
  date       DateTime
  localityId String
  adminId    String
  linemanId  String
  admin      Admin    @relation(fields: [adminId], references: [id])
  lineman    Lineman  @relation(fields: [linemanId], references: [id])
  locality   Locality @relation(fields: [localityId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([linemanId])
}

model Incident {
  id            String           @id @default(uuid())
  reporterId    String
  latitude      Float
  longitude     Float
  description   String
  status        IncidentStatus   @default(REPORTED)
  localityId    String
  photoUrl      String?
  locality      Locality         @relation(fields: [localityId], references: [id], onDelete: Cascade)
  reporter      BasicUser        @relation(fields: [reporterId], references: [id])
  updates       IncidentUpdate[]
  notifications Notification[]
  reports       Report[]

  @@index([localityId, status])
  @@index([latitude, longitude])
}

model Outage {
  id            String         @id @default(uuid())
  location      String
  reason        String
  startTime     DateTime
  endTime       DateTime
  localityId    String
  linemanId     String
  notifications Notification[]
  Lineman       Lineman        @relation(fields: [linemanId], references: [id])
  locality      Locality       @relation(fields: [localityId], references: [id], onDelete: Cascade)
  reports       Report[]

  @@index([localityId, startTime])
  @@index([startTime, endTime])
}

model IncidentUpdate {
  id         String   @id @default(uuid())
  resolution String
  updatedAt  DateTime @default(now())
  incidentId String
  linemanId  String
  incident   Incident @relation(fields: [incidentId], references: [id])
  lineman    Lineman  @relation(fields: [linemanId], references: [id])
}

model Report {
  id            String         @id @default(uuid())
  reportingTime DateTime
  incidentId    String?
  outageId      String?
  notifications Notification[]
  incident      Incident?      @relation(fields: [incidentId], references: [id])
  outage        Outage?        @relation(fields: [outageId], references: [id])

  @@index([incidentId])
  @@index([outageId])
}

model Notification {
  id               String                  @id @default(uuid())
  time             DateTime                @default(now())
  message          String
  notificationType NotificationType
  relatedType      RelatedType
  relatedId        String
  userId           String?
  incidentId       String?
  outageId         String?
  reportId         String?
  Incident         Incident?               @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  Outage           Outage?                 @relation(fields: [outageId], references: [id], onDelete: Cascade)
  Report           Report?                 @relation(fields: [reportId], references: [id], onDelete: Cascade)
  User             User?                   @relation(fields: [userId], references: [id])
  receipients      NotificationRecipient[]

  @@index([userId, notificationType])
  @@index([relatedType, relatedId])
}

model NotificationRecipient {
  id             String       @id @default(uuid())
  notificationId String
  userId         String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
}

model Transaction {
  id          String          @id @default(uuid())
  householdId String
  amount      Float
  type        TransactionType
  timestamp   DateTime        @default(now())
  billId      String?
  bill        Bill?           @relation(fields: [billId], references: [id])
  household   Household       @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@index([householdId])
  @@index([timestamp])
}

model Bill {
  id           String        @id @default(uuid())
  householdId  String
  billingMonth DateTime
  totalAmount  Float
  status       BillStatus    @default(PENDING)
  issuedAt     DateTime      @default(now())
  dueDate      DateTime
  household    Household     @relation(fields: [householdId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([householdId, billingMonth])
  @@index([householdId, billingMonth])
}

model Otp {
  id        String   @id @default(uuid())
  userId    String
  email     String
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, userId])
}

enum Role {
  ADMIN
  LINEMAN
  BASIC_USER
}

enum IncidentStatus {
  REPORTED
  IN_PROGRESS
  RESOLVED
}

enum TransactionType {
  PAYMENT
  ADJUSTMENT
  REFUND
}

enum BillStatus {
  PENDING
  PAID
  OVERDUE
}

enum RelatedType {
  INCIDENT
  OUTAGE
  REPORT
  APPOINTMENT
}

enum NotificationType {
  ALERT
  RESOLVED
  SCHEDULED
  ASSIGNED
  CONFIRMED
}